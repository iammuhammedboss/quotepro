<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Export Quotation <%= quotation.quotation_no %> - QuotePro</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .export-container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .export-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .export-header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .export-header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            min-height: 70vh;
        }

        .export-wizard {
            padding: 40px;
            background: #f8f9fa;
            border-right: 1px solid #e9ecef;
        }

        .preview-panel {
            padding: 40px;
            background: white;
            position: relative;
        }

        .step {
            margin-bottom: 40px;
            opacity: 0.3;
            transition: opacity 0.3s ease;
        }

        .step.active {
            opacity: 1;
        }

        .step.completed {
            opacity: 0.7;
        }

        .step-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #6c757d;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
            transition: background 0.3s ease;
        }

        .step.active .step-number {
            background: #667eea;
        }

        .step.completed .step-number {
            background: #28a745;
        }

        .step-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
        }

        .step-content {
            margin-left: 55px;
        }

        .option-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .option-card {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            background: white;
        }

        .option-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
        }

        .option-card.selected {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .option-card i {
            font-size: 2rem;
            margin-bottom: 10px;
            color: #667eea;
        }

        .option-card h3 {
            margin-bottom: 8px;
            color: #333;
        }

        .option-card p {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .letterhead-selector {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }

        .letterhead-selector.show {
            display: block;
        }

        .letterhead-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .letterhead-option {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .letterhead-option:hover {
            border-color: #667eea;
        }

        .letterhead-option.selected {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .letterhead-preview {
            width: 100%;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            border-radius: 4px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
        }

        .format-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
        }

        .format-option {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 15px 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .format-option:hover {
            border-color: #667eea;
        }

        .format-option.selected {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .advanced-settings {
            margin-top: 20px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            border: 1px solid #e9ecef;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .setting-group {
            margin-bottom: 20px;
        }

        .setting-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .setting-group select,
        .setting-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
        }

        .setting-group select:focus,
        .setting-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
            width: 18px;
            height: 18px;
        }

        .preview-container {
            position: relative;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            min-height: 500px;
        }

        .preview-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }

        .loading-spinner {
            border: 4px solid #f3f4f6;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .preview-iframe {
            width: 100%;
            height: 600px;
            border: none;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            background: white;
        }

        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .delivery-options {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .delivery-option {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .delivery-option:hover {
            border-color: #667eea;
        }

        .delivery-option.selected {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .delivery-icon {
            font-size: 2rem;
            color: #667eea;
            width: 50px;
            text-align: center;
        }

        .delivery-content h3 {
            margin-bottom: 5px;
        }

        .delivery-content p {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .progress-bar {
            height: 4px;
            background: #e9ecef;
            border-radius: 2px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .export-wizard {
                border-right: none;
                border-bottom: 1px solid #e9ecef;
            }

            .option-grid {
                grid-template-columns: 1fr;
            }

            .settings-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="export-container">
        <div class="export-header">
            <h1><i class="fas fa-download"></i> Export Quotation</h1>
            <p>Quotation <%= quotation.quotation_no %> - <%= quotation.client_name %></p>
        </div>

        <div class="main-content">
            <!-- Export Wizard -->
            <div class="export-wizard">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressBar" style="width: 20%"></div>
                </div>

                <!-- Step 1: Export Method -->
                <div class="step active" id="step1">
                    <div class="step-header">
                        <div class="step-number">1</div>
                        <div class="step-title">Export Method</div>
                    </div>
                    <div class="step-content">
                        <div class="option-grid">
                            <div class="option-card" data-method="digital">
                                <i class="fas fa-laptop"></i>
                                <h3>Digital</h3>
                                <p>For web, email, and digital sharing</p>
                            </div>
                            <div class="option-card" data-method="print">
                                <i class="fas fa-print"></i>
                                <h3>Print</h3>
                                <p>For physical printing and documents</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Paper Type -->
                <div class="step" id="step2">
                    <div class="step-header">
                        <div class="step-number">2</div>
                        <div class="step-title">Paper Type</div>
                    </div>
                    <div class="step-content">
                        <div class="option-grid" id="paperOptions">
                            <!-- Dynamic options based on export method -->
                        </div>

                        <!-- Letterhead Selector -->
                        <div class="letterhead-selector" id="letterheadSelector">
                            <h4>Select Letterhead Design</h4>
                            <div class="letterhead-options">
                                <div class="letterhead-option" data-letterhead="eurotech">
                                    <div class="letterhead-preview" style="background-image: url('/images/eurotech-letterhead.jpg')"></div>
                                    <h5>Eurotech Letterhead</h5>
                                    <p>Professional corporate design</p>
                                </div>
                                <div class="letterhead-option" data-letterhead="plain">
                                    <div class="letterhead-preview" style="background-color: #f8f9fa; border: 2px dashed #dee2e6;"></div>
                                    <h5>Plain Template</h5>
                                    <p>Simple, clean design</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 3: Format & Settings -->
                <div class="step" id="step3">
                    <div class="step-header">
                        <div class="step-number">3</div>
                        <div class="step-title">Format & Settings</div>
                    </div>
                    <div class="step-content">
                        <div class="format-options">
                            <div class="format-option selected" data-format="pdf">
                                <i class="fas fa-file-pdf"></i>
                                <div>PDF</div>
                            </div>
                            <div class="format-option" data-format="excel">
                                <i class="fas fa-file-excel"></i>
                                <div>Excel</div>
                            </div>
                            <div class="format-option" data-format="png">
                                <i class="fas fa-file-image"></i>
                                <div>PNG</div>
                            </div>
                            <div class="format-option" data-format="jpg">
                                <i class="fas fa-file-image"></i>
                                <div>JPG</div>
                            </div>
                        </div>

                        <div class="advanced-settings">
                            <h4>Advanced Settings</h4>
                            <div class="settings-grid">
                                <div class="setting-group">
                                    <label>Paper Size</label>
                                    <select id="paperSize">
                                        <option value="A4">A4</option>
                                        <option value="A3">A3</option>
                                        <option value="Letter">Letter</option>
                                        <option value="Legal">Legal</option>
                                    </select>
                                </div>

                                <div class="setting-group">
                                    <label>Orientation</label>
                                    <select id="orientation">
                                        <option value="portrait">Portrait</option>
                                        <option value="landscape">Landscape</option>
                                    </select>
                                </div>

                                <div class="setting-group">
                                    <label>Quality</label>
                                    <select id="quality">
                                        <option value="high">High (Slow)</option>
                                        <option value="medium" selected>Medium (Balanced)</option>
                                        <option value="low">Low (Fast)</option>
                                    </select>
                                </div>

                                <div class="setting-group">
                                    <label>Font Size</label>
                                    <select id="fontSize">
                                        <option value="small">Small</option>
                                        <option value="medium" selected>Medium</option>
                                        <option value="large">Large</option>
                                    </select>
                                </div>
                            </div>

                            <div class="checkbox-group">
                                <input type="checkbox" id="includeSignature" checked>
                                <label for="includeSignature">Include Signature & Stamp</label>
                            </div>

                            <div class="checkbox-group">
                                <input type="checkbox" id="includeQR" checked>
                                <label for="includeQR">Include QR Code</label>
                            </div>

                            <div class="checkbox-group">
                                <input type="checkbox" id="includeWatermark">
                                <label for="includeWatermark">Add Watermark</label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 4: Delivery Method -->
                <div class="step" id="step4">
                    <div class="step-header">
                        <div class="step-number">4</div>
                        <div class="step-title">Delivery Method</div>
                    </div>
                    <div class="step-content">
                        <div class="delivery-options">
                            <div class="delivery-option selected" data-delivery="download">
                                <div class="delivery-icon">
                                    <i class="fas fa-download"></i>
                                </div>
                                <div class="delivery-content">
                                    <h3>Download</h3>
                                    <p>Save file to your device</p>
                                </div>
                            </div>
                            <div class="delivery-option" data-delivery="email">
                                <div class="delivery-icon">
                                    <i class="fas fa-envelope"></i>
                                </div>
                                <div class="delivery-content">
                                    <h3>Email (Coming Soon)</h3>
                                    <p>Send directly via email</p>
                                </div>
                            </div>
                            <div class="delivery-option" data-delivery="whatsapp">
                                <div class="delivery-icon">
                                    <i class="fab fa-whatsapp"></i>
                                </div>
                                <div class="delivery-content">
                                    <h3>WhatsApp (Coming Soon)</h3>
                                    <p>Share via WhatsApp</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation Buttons -->
                <div class="navigation-buttons">
                    <button class="btn btn-secondary" id="backBtn" disabled>
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                    <button class="btn btn-primary" id="nextBtn">
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                    <button class="btn btn-success" id="generateBtn" style="display: none;">
                        <i class="fas fa-magic"></i> Generate & Download
                    </button>
                </div>
            </div>

            <!-- Preview Panel -->
            <div class="preview-panel">
                <h3><i class="fas fa-eye"></i> Live Preview</h3>
                <div class="preview-container">
                    <div class="preview-loading" id="previewLoading">
                        <div class="loading-spinner"></div>
                        <p>Generating preview...</p>
                    </div>
                    <iframe class="preview-iframe" id="previewFrame" style="display: none;"></iframe>
                </div>
            </div>
        </div>
    </div>

    <script>
        class ExportWizard {
            constructor() {
                this.currentStep = 1;
                this.totalSteps = 4;
                this.exportSettings = {
                    method: 'digital',
                    paperType: 'plain',
                    letterhead: 'plain',
                    format: 'pdf',
                    paperSize: 'A4',
                    orientation: 'portrait',
                    quality: 'medium',
                    fontSize: 'medium',
                    includeSignature: true,
                    includeQR: true,
                    includeWatermark: false,
                    delivery: 'download'
                };
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.updatePaperOptions();
                this.generatePreview();
            }

            bindEvents() {
                // Export method selection
                document.querySelectorAll('[data-method]').forEach(card => {
                    card.addEventListener('click', (e) => {
                        this.selectExportMethod(e.target.closest('[data-method]').dataset.method);
                    });
                });

                // Paper type selection
                document.addEventListener('click', (e) => {
                    if (e.target.closest('[data-paper]')) {
                        this.selectPaperType(e.target.closest('[data-paper]').dataset.paper);
                    }
                });

                // Letterhead selection
                document.querySelectorAll('[data-letterhead]').forEach(option => {
                    option.addEventListener('click', (e) => {
                        this.selectLetterhead(e.target.closest('[data-letterhead]').dataset.letterhead);
                    });
                });

                // Format selection
                document.querySelectorAll('[data-format]').forEach(option => {
                    option.addEventListener('click', (e) => {
                        this.selectFormat(e.target.closest('[data-format]').dataset.format);
                    });
                });

                // Delivery method selection
                document.querySelectorAll('[data-delivery]').forEach(option => {
                    option.addEventListener('click', (e) => {
                        this.selectDelivery(e.target.closest('[data-delivery]').dataset.delivery);
                    });
                });

                // Settings changes
                document.getElementById('paperSize').addEventListener('change', (e) => {
                    this.exportSettings.paperSize = e.target.value;
                    this.generatePreview();
                });

                document.getElementById('orientation').addEventListener('change', (e) => {
                    this.exportSettings.orientation = e.target.value;
                    this.generatePreview();
                });

                document.getElementById('quality').addEventListener('change', (e) => {
                    this.exportSettings.quality = e.target.value;
                    this.generatePreview();
                });

                document.getElementById('fontSize').addEventListener('change', (e) => {
                    this.exportSettings.fontSize = e.target.value;
                    this.generatePreview();
                });

                document.getElementById('includeSignature').addEventListener('change', (e) => {
                    this.exportSettings.includeSignature = e.target.checked;
                    this.generatePreview();
                });

                document.getElementById('includeQR').addEventListener('change', (e) => {
                    this.exportSettings.includeQR = e.target.checked;
                    this.generatePreview();
                });

                document.getElementById('includeWatermark').addEventListener('change', (e) => {
                    this.exportSettings.includeWatermark = e.target.checked;
                    this.generatePreview();
                });

                // Navigation buttons
                document.getElementById('backBtn').addEventListener('click', () => this.goBack());
                document.getElementById('nextBtn').addEventListener('click', () => this.goNext());
                document.getElementById('generateBtn').addEventListener('click', () => this.generateExport());
            }

            selectExportMethod(method) {
                this.exportSettings.method = method;
                
                // Update UI
                document.querySelectorAll('[data-method]').forEach(card => {
                    card.classList.remove('selected');
                });
                document.querySelector(`[data-method="${method}"]`).classList.add('selected');
                
                this.updatePaperOptions();
                this.generatePreview();
            }

            updatePaperOptions() {
                const paperOptionsContainer = document.getElementById('paperOptions');
                const method = this.exportSettings.method;
                
                let optionsHTML = '';
                
                if (method === 'digital') {
                    optionsHTML = `
                        <div class="option-card selected" data-paper="plain">
                            <i class="fas fa-file-alt"></i>
                            <h3>Plain Template</h3>
                            <p>Simple digital format</p>
                        </div>
                        <div class="option-card" data-paper="letterhead">
                            <i class="fas fa-file-image"></i>
                            <h3>Letterhead Template</h3>
                            <p>With company branding</p>
                        </div>
                    `;
                } else {
                    optionsHTML = `
                        <div class="option-card selected" data-paper="plain">
                            <i class="fas fa-file-alt"></i>
                            <h3>Plain Paper</h3>
                            <p>Print on plain paper</p>
                        </div>
                        <div class="option-card" data-paper="letterhead-paper">
                            <i class="fas fa-file-image"></i>
                            <h3>Letterhead Paper</h3>
                            <p>Pre-printed letterhead in printer</p>
                        </div>
                    `;
                }
                
                paperOptionsContainer.innerHTML = optionsHTML;
                this.exportSettings.paperType = 'plain';
                
                // Re-bind events for new options
                document.querySelectorAll('[data-paper]').forEach(card => {
                    card.addEventListener('click', (e) => {
                        this.selectPaperType(e.target.closest('[data-paper]').dataset.paper);
                    });
                });
            }

            selectPaperType(paperType) {
                this.exportSettings.paperType = paperType;
                
                // Update UI
                document.querySelectorAll('[data-paper]').forEach(card => {
                    card.classList.remove('selected');
                });
                document.querySelector(`[data-paper="${paperType}"]`).classList.add('selected');
                
                // Show/hide letterhead selector
                const letterheadSelector = document.getElementById('letterheadSelector');
                if (paperType === 'letterhead' || paperType === 'plain') {
                    letterheadSelector.classList.add('show');
                } else {
                    letterheadSelector.classList.remove('show');
                    this.exportSettings.letterhead = 'plain';
                }
                
                this.generatePreview();
            }

            selectLetterhead(letterhead) {
                this.exportSettings.letterhead = letterhead;
                
                // Update UI
                document.querySelectorAll('[data-letterhead]').forEach(option => {
                    option.classList.remove('selected');
                });
                document.querySelector(`[data-letterhead="${letterhead}"]`).classList.add('selected');
                
                this.generatePreview();
            }

            selectFormat(format) {
                this.exportSettings.format = format;
                
                // Update UI
                document.querySelectorAll('[data-format]').forEach(option => {
                    option.classList.remove('selected');
                });
                document.querySelector(`[data-format="${format}"]`).classList.add('selected');
                
                this.generatePreview();
            }

            selectDelivery(delivery) {
                this.exportSettings.delivery = delivery;
                
                // Update UI
                document.querySelectorAll('[data-delivery]').forEach(option => {
                    option.classList.remove('selected');
                });
                document.querySelector(`[data-delivery="${delivery}"]`).classList.add('selected');
            }

            goNext() {
                if (this.currentStep < this.totalSteps) {
                    this.currentStep++;
                    this.updateStepUI();
                }
            }

            goBack() {
                if (this.currentStep > 1) {
                    this.currentStep--;
                    this.updateStepUI();
                }
            }

            updateStepUI() {
                // Update step classes
                document.querySelectorAll('.step').forEach((step, index) => {
                    const stepNum = index + 1;
                    step.classList.remove('active', 'completed');
                    
                    if (stepNum === this.currentStep) {
                        step.classList.add('active');
                    } else if (stepNum < this.currentStep) {
                        step.classList.add('completed');
                    }
                });

                // Update progress bar
                const progress = (this.currentStep / this.totalSteps) * 100;
                document.getElementById('progressBar').style.width = `${progress}%`;

                // Update navigation buttons
                const backBtn = document.getElementById('backBtn');
                const nextBtn = document.getElementById('nextBtn');
                const generateBtn = document.getElementById('generateBtn');

                backBtn.disabled = this.currentStep === 1;

                if (this.currentStep === this.totalSteps) {
                    nextBtn.style.display = 'none';
                    generateBtn.style.display = 'inline-flex';
                } else {
                    nextBtn.style.display = 'inline-flex';
                    generateBtn.style.display = 'none';
                }
            }

            generatePreview() {
                const previewLoading = document.getElementById('previewLoading');
                const previewFrame = document.getElementById('previewFrame');
                
                // Show loading
                previewLoading.style.display = 'block';
                previewFrame.style.display = 'none';
                
                // Simulate preview generation delay
                setTimeout(() => {
                    const previewUrl = `/quotations/export/<%= quotation.id %>/preview`;
                    
                    // Create form data
                    const formData = new FormData();
                    Object.keys(this.exportSettings).forEach(key => {
                        formData.append(key, this.exportSettings[key]);
                    });
                    
                    // Generate preview
                    fetch(previewUrl, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.text())
                    .then(html => {
                        // Create blob URL for iframe
                        const blob = new Blob([html], { type: 'text/html' });
                        const url = URL.createObjectURL(blob);
                        
                        previewFrame.src = url;
                        previewLoading.style.display = 'none';
                        previewFrame.style.display = 'block';
                        
                        // Clean up previous blob URL
                        previewFrame.onload = () => {
                            setTimeout(() => URL.revokeObjectURL(url), 1000);
                        };
                    })
                    .catch(error => {
                        console.error('Preview generation failed:', error);
                        previewLoading.innerHTML = `
                            <div style="color: #dc3545;">
                                <i class="fas fa-exclamation-triangle"></i>
                                <p>Preview generation failed</p>
                                <small>Please check your settings and try again</small>
                            </div>
                        `;
                    });
                }, 500);
            }

            generateExport() {
                const generateBtn = document.getElementById('generateBtn');
                const originalText = generateBtn.innerHTML;
                
                // Show loading state
                generateBtn.disabled = true;
                generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                
                // Prepare export data
                const formData = new FormData();
                Object.keys(this.exportSettings).forEach(key => {
                    formData.append(key, this.exportSettings[key]);
                });
                
                // Determine export endpoint
                const format = this.exportSettings.format;
                const exportUrl = `/quotations/export/<%= quotation.id %>/${format}`;
                
                // Generate and download
                fetch(exportUrl, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Export generation failed');
                    }
                    
                    // Get filename from headers
                    const disposition = response.headers.get('content-disposition');
                    let filename = `quotation-<%= quotation.quotation_no %>.${format}`;
                    if (disposition) {
                        const matches = disposition.match(/filename="(.+)"/);
                        if (matches) filename = matches[1];
                    }
                    
                    return response.blob().then(blob => ({ blob, filename }));
                })
                .then(({ blob, filename }) => {
                    // Create download link
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    // Show success message
                    generateBtn.innerHTML = '<i class="fas fa-check"></i> Downloaded Successfully!';
                    generateBtn.style.background = '#28a745';
                    
                    // Reset button after delay
                    setTimeout(() => {
                        generateBtn.disabled = false;
                        generateBtn.innerHTML = originalText;
                        generateBtn.style.background = '';
                    }, 3000);
                })
                .catch(error => {
                    console.error('Export generation failed:', error);
                    
                    // Show error state
                    generateBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Generation Failed';
                    generateBtn.style.background = '#dc3545';
                    
                    // Reset button after delay
                    setTimeout(() => {
                        generateBtn.disabled = false;
                        generateBtn.innerHTML = originalText;
                        generateBtn.style.background = '';
                    }, 3000);
                });
            }
        }

        // Initialize the export wizard when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new ExportWizard();
        });
    </script>
</body>
</html>