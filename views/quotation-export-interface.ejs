<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Export Quotation #<%= quotation.quotation_no %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@400;600&display=swap" rel="stylesheet">
  <link rel="icon" type="image/png" href="/images/quotepro-logo.png">
  
  <style>
    body { font-family: 'Outfit', sans-serif; }
    
    .export-panel {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 16px;
      padding: 24px;
      color: white;
      margin-bottom: 24px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .settings-card {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.05);
      border: 1px solid #e5e7eb;
      transition: all 0.3s ease;
    }
    
    .settings-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }
    
    .settings-header {
      font-size: 18px;
      font-weight: 600;
      color: #374151;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .preview-frame {
      border: 3px solid #e5e7eb;
      border-radius: 12px;
      background: white;
      min-height: 600px;
      position: sticky;
      top: 20px;
    }
    
    .export-btn {
      background: linear-gradient(135deg, #10b981 0%, #047857 100%);
      color: white;
      padding: 16px 32px;
      border-radius: 12px;
      font-weight: 600;
      font-size: 16px;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
    }
    
    .export-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }
    
    .export-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    
    .method-card {
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      padding: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-align: center;
    }
    
    .method-card:hover {
      border-color: #3b82f6;
      background: #f0f9ff;
    }
    
    .method-card.selected {
      border-color: #10b981;
      background: #f0fdf4;
    }
    
    .range-input {
      -webkit-appearance: none;
      appearance: none;
      height: 6px;
      border-radius: 3px;
      background: #e5e7eb;
      outline: none;
    }
    
    .range-input::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      height: 20px;
      width: 20px;
      border-radius: 50%;
      background: #3b82f6;
      cursor: pointer;
    }
    
    .checkbox-card {
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      padding: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .checkbox-card:hover {
      border-color: #3b82f6;
      background: #f0f9ff;
    }
    
    .checkbox-card.checked {
      border-color: #10b981;
      background: #f0fdf4;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e5e7eb;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #10b981, #059669);
      transition: width 0.3s ease;
    }
    
    .whatsapp-preview {
      background: #e7f7dd;
      border-radius: 8px;
      padding: 16px;
      margin-top: 12px;
      border-left: 4px solid #25d366;
    }
    
    .email-preview {
      background: #f0f9ff;
      border-radius: 8px;
      padding: 16px;
      margin-top: 12px;
      border-left: 4px solid #3b82f6;
    }
  </style>
</head>
<body class="bg-gray-50">

<!-- Header -->
<div class="bg-red-700 text-white px-6 py-4 flex justify-between items-center">
  <div class="flex items-center gap-4">
    <img src="/images/quotepro-logo-white.png" class="h-10" />
    <div>
      <h1 class="text-xl font-bold">QuotePro ‚Äì Export Quotation</h1>
      <p class="text-sm">Professional Export Interface</p>
    </div>
  </div>
  
  <div class="flex gap-3">
    <a href="/quotations/view/<%= quotation.id %>" class="bg-white text-red-700 px-3 py-2 rounded hover:bg-gray-200 text-sm font-medium">
      üëÅÔ∏è View
    </a>
    <a href="/quotations/search" class="bg-white text-red-700 px-3 py-2 rounded hover:bg-gray-200 text-sm font-medium">
      üîç Search
    </a>
    <a href="/dashboard" class="bg-white text-red-700 px-3 py-2 rounded hover:bg-gray-200 text-sm font-medium">
      üè† Dashboard
    </a>
  </div>
</div>

<div class="max-w-7xl mx-auto p-6">
  
  <!-- Main Export Panel -->
  <div class="export-panel">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-3xl font-bold mb-2">üöÄ Export Quotation</h2>
        <p class="text-blue-100 text-lg">Quotation #<%= quotation.quotation_no %> - <%= quotation.client_name %></p>
        <p class="text-blue-200 text-sm">Total: OMR <%= parseFloat(quotation.grand_total).toFixed(3) %></p>
      </div>
      <div class="text-right">
        <div class="text-6xl mb-2">üìÑ</div>
        <p class="text-sm text-blue-200">Professional Export</p>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    
    <!-- Settings Panel -->
    <div class="lg:col-span-2 space-y-6">
      
      <!-- Header Customization -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">‚úèÔ∏è</span>
          <span>Header Customization</span>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Main Heading</label>
            <select id="customHeader" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <option value="QUOTATION FOR WATERPROOFING">Quotation for Waterproofing</option>
              <option value="QUOTATION FOR EPOXY WORKS">Quotation for Epoxy Works</option>
              <option value="QUOTATION FOR PAINTING WORKS">Quotation for Painting Works</option>
              <option value="QUOTATION FOR CONSTRUCTION">Quotation for Construction</option>
              <option value="QUOTATION FOR MAINTENANCE">Quotation for Maintenance</option>
              <option value="CUSTOM">Custom Heading...</option>
            </select>
          </div>
          
          <div id="customHeaderInput" class="hidden">
            <label class="block text-sm font-medium text-gray-700 mb-2">Custom Heading</label>
            <input type="text" id="customHeaderText" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter custom heading...">
          </div>
          
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Header Font Size</label>
              <div class="flex items-center gap-3">
                <input type="range" id="headerFontSize" class="range-input flex-1" min="24" max="36" value="28">
                <span id="headerFontSizeValue" class="text-sm font-medium text-gray-600 min-w-12">28px</span>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">QR Code Size</label>
              <div class="flex items-center gap-3">
                <input type="range" id="qrSize" class="range-input flex-1" min="80" max="150" value="100">
                <span id="qrSizeValue" class="text-sm font-medium text-gray-600 min-w-12">100px</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- File Type & Paper Settings -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">üìÑ</span>
          <span>File Type & Paper Settings</span>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3">File Type</label>
            <div class="grid grid-cols-4 gap-3">
              <div class="method-card selected" data-type="pdf">
                <div class="text-2xl mb-2">üìÑ</div>
                <div class="text-sm font-medium">PDF</div>
              </div>
              <div class="method-card" data-type="excel">
                <div class="text-2xl mb-2">üìä</div>
                <div class="text-sm font-medium">Excel</div>
              </div>
              <div class="method-card" data-type="png">
                <div class="text-2xl mb-2">üñºÔ∏è</div>
                <div class="text-sm font-medium">PNG</div>
              </div>
              <div class="method-card" data-type="jpg">
                <div class="text-2xl mb-2">üì∑</div>
                <div class="text-sm font-medium">JPG</div>
              </div>
            </div>
          </div>
          
          <div id="paperSettings">
            <label class="block text-sm font-medium text-gray-700 mb-3">Paper & Quality</label>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <select id="paperType" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="plain">Plain Paper</option>
                  <option value="draft">Draft Quality</option>
                  <option value="letterhead-1">Letterhead - Main</option>
                  <option value="letterhead-2">Letterhead - Alternative</option>
                  <option value="letterhead-3">Letterhead - Premium</option>
                </select>
              </div>
              <div>
                <select id="paperSize" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option value="A4">A4 (210√ó297mm)</option>
                  <option value="Letter">Letter (216√ó279mm)</option>
                  <option value="Legal">Legal (216√ó356mm)</option>
                  <option value="A3">A3 (297√ó420mm)</option>
                </select>
              </div>
            </div>
          </div>
          
          <div id="imageSettings" class="hidden space-y-3">
            <label class="block text-sm font-medium text-gray-700">Image Quality</label>
            <div class="flex items-center gap-3">
              <input type="range" id="imageQuality" class="range-input flex-1" min="60" max="100" value="90">
              <span id="imageQualityValue" class="text-sm font-medium text-gray-600 min-w-12">90%</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Signature & Stamp -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">‚úçÔ∏è</span>
          <span>Signature & Stamp</span>
        </div>
        
        <div class="space-y-4">
          <div class="grid grid-cols-2 gap-4">
            <div class="checkbox-card" id="signatureCard">
              <div class="flex items-center gap-3">
                <input type="checkbox" id="includeSignature" class="w-5 h-5 text-blue-600 rounded">
                <div>
                  <div class="font-medium text-gray-900">Add Signature</div>
                  <div class="text-sm text-gray-500">Digital signature</div>
                </div>
              </div>
            </div>
            <div class="checkbox-card" id="stampCard">
              <div class="flex items-center gap-3">
                <input type="checkbox" id="includeStamp" class="w-5 h-5 text-blue-600 rounded">
                <div>
                  <div class="font-medium text-gray-900">Add Stamp</div>
                  <div class="text-sm text-gray-500">Company stamp</div>
                </div>
              </div>
            </div>
          </div>
          
          <div id="stampPlacement" class="hidden">
            <label class="block text-sm font-medium text-gray-700 mb-2">Stamp Placement</label>
            <div class="grid grid-cols-2 gap-3">
              <label class="flex items-center gap-2">
                <input type="radio" name="stampPosition" value="auto" checked class="text-blue-600">
                <span class="text-sm">Auto (Top Right)</span>
              </label>
              <label class="flex items-center gap-2">
                <input type="radio" name="stampPosition" value="manual" class="text-blue-600">
                <span class="text-sm">Manual Position</span>
              </label>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Font Settings -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">üî§</span>
          <span>Typography</span>
        </div>
        
        <div class="grid grid-cols-3 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Body Text</label>
            <div class="flex items-center gap-3">
              <input type="range" id="bodyFontSize" class="range-input flex-1" min="12" max="18" value="14">
              <span id="bodyFontSizeValue" class="text-sm font-medium text-gray-600 min-w-12">14px</span>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Table Text</label>
            <div class="flex items-center gap-3">
              <input type="range" id="tableFontSize" class="range-input flex-1" min="10" max="16" value="12">
              <span id="tableFontSizeValue" class="text-sm font-medium text-gray-600 min-w-12">12px</span>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Small Text</label>
            <div class="flex items-center gap-3">
              <input type="range" id="smallFontSize" class="range-input flex-1" min="9" max="14" value="11">
              <span id="smallFontSizeValue" class="text-sm font-medium text-gray-600 min-w-12">11px</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Export Method -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">üöÄ</span>
          <span>Export Method</span>
        </div>
        
        <div class="space-y-4">
          <div class="grid grid-cols-3 gap-4">
            <div class="method-card selected" data-method="download">
              <div class="text-3xl mb-2">‚¨áÔ∏è</div>
              <div class="font-medium">Download</div>
              <div class="text-xs text-gray-500 mt-1">Save to device</div>
            </div>
            <div class="method-card" data-method="email">
              <div class="text-3xl mb-2">üìß</div>
              <div class="font-medium">Email</div>
              <div class="text-xs text-gray-500 mt-1">Send via email</div>
            </div>
            <div class="method-card" data-method="whatsapp">
              <div class="text-3xl mb-2">üí¨</div>
              <div class="font-medium">WhatsApp</div>
              <div class="text-xs text-gray-500 mt-1">Share on WhatsApp</div>
            </div>
          </div>
          
          <!-- Email Preview -->
          <div id="emailPreview" class="hidden email-preview">
            <div class="font-medium text-blue-800 mb-2">üìß Email Preview</div>
            <div class="text-sm space-y-1">
              <div><strong>To:</strong> <span id="emailTo"><%= quotation.client_email || 'Client email not available' %></span></div>
              <div><strong>Subject:</strong> Quotation <%= quotation.quotation_no %> - <%= quotation.client_name %></div>
              <div class="mt-2 p-2 bg-white rounded text-xs text-gray-600">
                Dear <%= quotation.client_name %>,<br><br>
                Please find attached your quotation for the requested services.<br><br>
                Best regards,<br>
                International Pipes Technology Co LLC
              </div>
            </div>
          </div>
          
          <!-- WhatsApp Preview -->
          <div id="whatsappPreview" class="hidden whatsapp-preview">
            <div class="font-medium text-green-800 mb-2">üí¨ WhatsApp Preview</div>
            <div class="text-sm space-y-1">
              <div><strong>To:</strong> <span id="whatsappTo"><%= quotation.client_phone || 'Client phone not available' %></span></div>
              <div class="mt-2 p-2 bg-white rounded text-xs text-gray-600" style="font-family: monospace;">
üìã *QUOTATION DETAILS*

üè¢ *Client:* <%= quotation.client_name %>
üì± *Phone:* <%= quotation.client_phone || 'N/A' %>
üìç *Location:* <%= quotation.project_location || 'N/A' %>
üí∞ *Total Amount:* OMR <%= parseFloat(quotation.grand_total).toFixed(3) %>
üìÖ *Date:* <%= new Date(quotation.tdate).toLocaleDateString('en-GB') %>
üî¢ *Quote No:* <%= quotation.quotation_no %>

üíß *International Pipes Technology Co LLC*
üåê Your Waterproofing Specialist
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="settings-card">
        <div class="flex gap-4">
          <button id="previewBtn" class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors">
            üëÅÔ∏è Preview
          </button>
          <button id="exportBtn" class="export-btn flex-2">
            üöÄ Export Now
          </button>
        </div>
        
        <div id="exportProgress" class="hidden mt-4">
          <div class="flex items-center justify-between text-sm text-gray-600 mb-2">
            <span id="progressText">Preparing export...</span>
            <span id="progressPercent">0%</span>
          </div>
          <div class="progress-bar">
            <div id="progressFill" class="progress-fill" style="width: 0%"></div>
          </div>
        </div>
      </div>
      
      <!-- Templates -->
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">üíæ</span>
          <span>Export Templates</span>
        </div>
        
        <div class="space-y-3">
          <div class="flex gap-3">
            <input type="text" id="templateName" placeholder="Template name..." class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <button id="saveTemplateBtn" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
              Save
            </button>
          </div>
          
          <div class="flex gap-2 flex-wrap">
            <button class="template-btn bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors">
              üìÑ Standard PDF
            </button>
            <button class="template-btn bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors">
              üìä Excel Report
            </button>
            <button class="template-btn bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors">
              üí¨ WhatsApp Ready
            </button>
          </div>
        </div>
      </div>
      
    </div>
    
    <!-- Preview Panel -->
    <div class="lg:col-span-1">
      <div class="settings-card">
        <div class="settings-header">
          <span class="text-2xl">üëÅÔ∏è</span>
          <span>Live Preview</span>
        </div>
        
        <div class="preview-frame">
          <iframe id="previewFrame" src="/quotations/export/<%= quotation.id %>/preview" class="w-full h-full border-0 rounded-lg"></iframe>
        </div>
        
        <div class="mt-4 text-center">
          <button id="refreshPreviewBtn" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm">
            üîÑ Refresh Preview
          </button>
        </div>
      </div>
    </div>
    
  </div>
</div>

<!-- WhatsApp Modal -->
<div id="whatsappModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white p-6 rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-auto">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">üì± WhatsApp Web</h2>
      <button id="closeWhatsappModal" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
    </div>
    
    <div class="space-y-4">
      <div class="bg-green-50 border border-green-200 rounded-lg p-4">
        <h3 class="font-medium text-green-800 mb-2">üìù Instructions:</h3>
        <ol class="text-sm text-green-700 space-y-1">
          <li>1. Open WhatsApp Web below</li>
          <li>2. Find your client: <strong><%= quotation.client_name %></strong></li>
          <li>3. Click in the message area</li>
          <li>4. Click "üìé Paste Document" button below</li>
          <li>5. Click "üìù Paste Caption" button for message text</li>
        </ol>
      </div>
      
      <div class="border rounded-lg overflow-hidden">
        <iframe id="whatsappFrame" src="https://web.whatsapp.com" class="w-full h-96 border-0"></iframe>
      </div>
      
      <div class="flex gap-3 justify-center">
        <button id="pasteDocumentBtn" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors">
          üìé Paste Document
        </button>
        <button id="pasteCaptionBtn" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
          üìù Paste Caption
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Global state
let currentSettings = {
  customHeader: 'QUOTATION FOR WATERPROOFING',
  headerFontSize: '28px',
  subheaderFontSize: '18px',
  bodyFontSize: '14px',
  tableFontSize: '12px',
  smallFontSize: '11px',
  qrSize: '100',
  fileType: 'pdf',
  paperType: 'plain',
  paperSize: 'A4',
  imageQuality: 90,
  includeSignature: false,
  includeStamp: false,
  stampPosition: 'auto',
  exportMethod: 'download'
};

let currentDocument = null; // Will store the generated document

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  initializeEventListeners();
  updatePreview();
});

function initializeEventListeners() {
  // Header customization
  document.getElementById('customHeader').addEventListener('change', function() {
    const value = this.value;
    const customInput = document.getElementById('customHeaderInput');
    
    if (value === 'CUSTOM') {
      customInput.classList.remove('hidden');
      currentSettings.customHeader = document.getElementById('customHeaderText').value || 'CUSTOM HEADING';
    } else {
      customInput.classList.add('hidden');
      currentSettings.customHeader = value;
    }
    updatePreview();
  });
  
  document.getElementById('customHeaderText').addEventListener('input', function() {
    currentSettings.customHeader = this.value || 'CUSTOM HEADING';
    updatePreview();
  });
  
  // Font size sliders
  const sliders = ['headerFontSize', 'bodyFontSize', 'tableFontSize', 'smallFontSize', 'qrSize', 'imageQuality'];
  sliders.forEach(slider => {
    const element = document.getElementById(slider);
    const valueSpan = document.getElementById(slider + 'Value');
    
    element.addEventListener('input', function() {
      const value = this.value;
      const unit = slider.includes('FontSize') ? 'px' : (slider === 'qrSize' ? 'px' : '%');
      
      currentSettings[slider] = value + (slider.includes('FontSize') || slider === 'qrSize' ? 'px' : '');
      valueSpan.textContent = value + unit;
      
      if (slider !== 'imageQuality') {
        updatePreview();
      }
    });
  });
  
  // File type selection
  document.querySelectorAll('[data-type]').forEach(card => {
    card.addEventListener('click', function() {
      document.querySelectorAll('[data-type]').forEach(c => c.classList.remove('selected'));
      this.classList.add('selected');
      
      currentSettings.fileType = this.dataset.type;
      
      // Show/hide relevant settings
      const paperSettings = document.getElementById('paperSettings');
      const imageSettings = document.getElementById('imageSettings');
      
      if (currentSettings.fileType === 'png' || currentSettings.fileType === 'jpg') {
        paperSettings.classList.add('hidden');
        imageSettings.classList.remove('hidden');
      } else if (currentSettings.fileType === 'excel') {
        paperSettings.classList.add('hidden');
        imageSettings.classList.add('hidden');
      } else {
        paperSettings.classList.remove('hidden');
        imageSettings.classList.add('hidden');
      }
    });
  });
  
  // Paper settings
  document.getElementById('paperType').addEventListener('change', function() {
    currentSettings.paperType = this.value;
    updatePreview();
  });
  
  document.getElementById('paperSize').addEventListener('change', function() {
    currentSettings.paperSize = this.value;
    updatePreview();
  });
  
  // Signature and stamp
  const signatureCard = document.getElementById('signatureCard');
  const stampCard = document.getElementById('stampCard');
  const signatureCheckbox = document.getElementById('includeSignature');
  const stampCheckbox = document.getElementById('includeStamp');
  const stampPlacement = document.getElementById('stampPlacement');
  
  signatureCard.addEventListener('click', function() {
    signatureCheckbox.checked = !signatureCheckbox.checked;
    this.classList.toggle('checked', signatureCheckbox.checked);
    currentSettings.includeSignature = signatureCheckbox.checked;
    updatePreview();
  });
  
  stampCard.addEventListener('click', function() {
    stampCheckbox.checked = !stampCheckbox.checked;
    this.classList.toggle('checked', stampCheckbox.checked);
    currentSettings.includeStamp = stampCheckbox.checked;
    
    if (stampCheckbox.checked) {
      stampPlacement.classList.remove('hidden');
    } else {
      stampPlacement.classList.add('hidden');
    }
    updatePreview();
  });
  
  document.querySelectorAll('input[name="stampPosition"]').forEach(radio => {
    radio.addEventListener('change', function() {
      currentSettings.stampPosition = this.value;
      updatePreview();
    });
  });
  
  // Export method selection
  document.querySelectorAll('[data-method]').forEach(card => {
    card.addEventListener('click', function() {
      document.querySelectorAll('[data-method]').forEach(c => c.classList.remove('selected'));
      this.classList.add('selected');
      
      currentSettings.exportMethod = this.dataset.method;
      
      // Show/hide relevant previews
      document.getElementById('emailPreview').classList.toggle('hidden', currentSettings.exportMethod !== 'email');
      document.getElementById('whatsappPreview').classList.toggle('hidden', currentSettings.exportMethod !== 'whatsapp');
    });
  });
  
  // Preview button
  document.getElementById('previewBtn').addEventListener('click', updatePreview);
  document.getElementById('refreshPreviewBtn').addEventListener('click', updatePreview);
  
  // Export button
  document.getElementById('exportBtn').addEventListener('click', handleExport);
  
  // Template buttons
  document.getElementById('saveTemplateBtn').addEventListener('click', saveTemplate);
  
  document.querySelectorAll('.template-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      loadTemplate(this.textContent.trim());
    });
  });
  
  // WhatsApp modal
  document.getElementById('closeWhatsappModal').addEventListener('click', closeWhatsAppModal);
  document.getElementById('pasteDocumentBtn').addEventListener('click', pasteDocumentToWhatsApp);
  document.getElementById('pasteCaptionBtn').addEventListener('click', pasteCaptionToWhatsApp);
}

function updatePreview() {
  const previewFrame = document.getElementById('previewFrame');
  
  // Create form data with current settings
  const formData = new FormData();
  Object.keys(currentSettings).forEach(key => {
    formData.append(key, currentSettings[key]);
  });
  
  // Update preview via POST to maintain settings
  fetch(`/quotations/export/<%= quotation.id %>/preview`, {
    method: 'POST',
    body: formData
  })
  .then(response => response.text())
  .then(html => {
    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    previewFrame.src = url;
  })
  .catch(err => {
    console.error('Preview error:', err);
  });
}

function handleExport() {
  const exportBtn = document.getElementById('exportBtn');
  const progressDiv = document.getElementById('exportProgress');
  const progressText = document.getElementById('progressText');
  const progressPercent = document.getElementById('progressPercent');
  const progressFill = document.getElementById('progressFill');
  
  // Disable button and show progress
  exportBtn.disabled = true;
  progressDiv.classList.remove('hidden');
  
  let progress = 0;
  const progressInterval = setInterval(() => {
    progress += Math.random() * 20;
    if (progress > 90) progress = 90;
    
    progressPercent.textContent = Math.round(progress) + '%';
    progressFill.style.width = progress + '%';
    
    if (progress < 30) {
      progressText.textContent = 'Preparing document...';
    } else if (progress < 60) {
      progressText.textContent = 'Generating ' + currentSettings.fileType.toUpperCase() + '...';
    } else {
      progressText.textContent = 'Finalizing export...';
    }
  }, 200);
  
  // Create form data
  const formData = new FormData();
  Object.keys(currentSettings).forEach(key => {
    formData.append(key, currentSettings[key]);
  });
  
  // Make export request
  fetch(`/quotations/export/<%= quotation.id %>/generate`, {
    method: 'POST',
    body: formData
  })
  .then(response => {
    clearInterval(progressInterval);
    progressPercent.textContent = '100%';
    progressFill.style.width = '100%';
    progressText.textContent = 'Export complete!';
    
    if (currentSettings.exportMethod === 'download') {
      return response.blob().then(blob => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = getFileName();
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });
    } else {
      return response.json();
    }
  })
  .then(data => {
    if (data && data.action === 'email') {
      handleEmailExport(data.emailData);
    } else if (data && data.action === 'whatsapp') {
      handleWhatsAppExport(data.whatsappData);
    }
    
    // Reset UI
    setTimeout(() => {
      exportBtn.disabled = false;
      progressDiv.classList.add('hidden');
      progressFill.style.width = '0%';
    }, 2000);
  })
  .catch(err => {
    console.error('Export error:', err);
    clearInterval(progressInterval);
    exportBtn.disabled = false;
    progressDiv.classList.add('hidden');
    progressText.textContent = 'Export failed';
    alert('Export failed: ' + err.message);
  });
}

function getFileName() {
  const quotationNo = '<%= quotation.quotation_no %>'.replace(/[^a-zA-Z0-9]/g, '-');
  const clientName = '<%= quotation.client_name %>'.replace(/[^a-zA-Z0-9]/g, '-').substring(0, 20);
  const date = new Date().toISOString().slice(0, 10);
  const extension = currentSettings.fileType === 'excel' ? 'xlsx' : currentSettings.fileType;
  
  return `${quotationNo}-${clientName}-${date}.${extension}`;
}

function handleEmailExport(emailData) {
  const subject = encodeURIComponent(emailData.subject);
  const body = encodeURIComponent(emailData.body);
  const mailto = `mailto:${emailData.to}?subject=${subject}&body=${body}`;
  
  window.open(mailto);
}

function handleWhatsAppExport(whatsappData) {
  currentDocument = whatsappData.document;
  
  // Show WhatsApp modal
  document.getElementById('whatsappModal').classList.remove('hidden');
  document.getElementById('whatsappModal').classList.add('flex');
}

function closeWhatsAppModal() {
  document.getElementById('whatsappModal').classList.add('hidden');
  document.getElementById('whatsappModal').classList.remove('flex');
}

function pasteDocumentToWhatsApp() {
  if (!currentDocument) {
    alert('No document available to paste');
    return;
  }
  
  // Convert base64 to blob
  const byteCharacters = atob(currentDocument.content);
  const byteNumbers = new Array(byteCharacters.length);
  for (let i = 0; i < byteCharacters.length; i++) {
    byteNumbers[i] = byteCharacters.charCodeAt(i);
  }
  const byteArray = new Uint8Array(byteNumbers);
  const blob = new Blob([byteArray], { type: currentDocument.contentType });
  
  // Create file
  const file = new File([blob], currentDocument.filename, { type: currentDocument.contentType });
  
  // Try to use clipboard API
  if (navigator.clipboard && navigator.clipboard.write) {
    const clipboardItem = new ClipboardItem({ [file.type]: blob });
    navigator.clipboard.write([clipboardItem])
      .then(() => {
        alert('Document copied to clipboard! Now paste it in WhatsApp.');
      })
      .catch(() => {
        // Fallback: create download link
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = file.name;
        a.click();
        URL.revokeObjectURL(url);
        alert('Document downloaded. Please upload it to WhatsApp manually.');
      });
  } else {
    // Fallback for older browsers
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = file.name;
    a.click();
    URL.revokeObjectURL(url);
    alert('Document downloaded. Please upload it to WhatsApp manually.');
  }
}

function pasteCaptionToWhatsApp() {
  const caption = `üìã *QUOTATION DETAILS*

üè¢ *Client:* <%= quotation.client_name %>
üì± *Phone:* <%= quotation.client_phone || 'N/A' %>
üìç *Location:* <%= quotation.project_location || 'N/A' %>
üí∞ *Total Amount:* OMR <%= parseFloat(quotation.grand_total).toFixed(3) %>
üìÖ *Date:* <%= new Date(quotation.tdate).toLocaleDateString('en-GB') %>
üî¢ *Quote No:* <%= quotation.quotation_no %>

üíß *International Pipes Technology Co LLC*
üåê Your Waterproofing Specialist

üìû Contact: +968 96030210
‚úâÔ∏è Email: eurotechoman.iptc@gmail.com
üåê www.eurotechoman.com`;

  // Copy to clipboard
  if (navigator.clipboard) {
    navigator.clipboard.writeText(caption)
      .then(() => {
        alert('Caption copied to clipboard! Now paste it in WhatsApp.');
      })
      .catch(() => {
        // Fallback
        const textArea = document.createElement('textarea');
        textArea.value = caption;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('Caption copied! Now paste it in WhatsApp.');
      });
  } else {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = caption;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    alert('Caption copied! Now paste it in WhatsApp.');
  }
}

function saveTemplate() {
  const templateName = document.getElementById('templateName').value.trim();
  if (!templateName) {
    alert('Please enter a template name');
    return;
  }
  
  fetch('/quotations/export/templates/save', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      templateName: templateName,
      settings: currentSettings
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Template saved successfully!');
      document.getElementById('templateName').value = '';
    } else {
      alert('Failed to save template: ' + data.error);
    }
  })
  .catch(err => {
    console.error('Save template error:', err);
    alert('Failed to save template');
  });
}

function loadTemplate(templateType) {
  if (templateType.includes('Standard PDF')) {
    currentSettings = {
      ...currentSettings,
      fileType: 'pdf',
      paperType: 'plain',
      includeSignature: true,
      includeStamp: false,
      exportMethod: 'download'
    };
  } else if (templateType.includes('Excel Report')) {
    currentSettings = {
      ...currentSettings,
      fileType: 'excel',
      exportMethod: 'download'
    };
  } else if (templateType.includes('WhatsApp Ready')) {
    currentSettings = {
      ...currentSettings,
      fileType: 'pdf',
      paperType: 'plain',
      includeSignature: false,
      includeStamp: true,
      exportMethod: 'whatsapp'
    };
  }
  
  // Update UI to reflect loaded template
  updateUIFromSettings();
  updatePreview();
  alert('Template loaded: ' + templateType);
}

function updateUIFromSettings() {
  // Update file type selection
  document.querySelectorAll('[data-type]').forEach(card => {
    card.classList.toggle('selected', card.dataset.type === currentSettings.fileType);
  });
  
  // Update export method selection
  document.querySelectorAll('[data-method]').forEach(card => {
    card.classList.toggle('selected', card.dataset.method === currentSettings.exportMethod);
  });
  
  // Update form inputs
  document.getElementById('paperType').value = currentSettings.paperType;
  document.getElementById('paperSize').value = currentSettings.paperSize;
  
  // Update checkboxes
  const signatureCheckbox = document.getElementById('includeSignature');
  const stampCheckbox = document.getElementById('includeStamp');
  const signatureCard = document.getElementById('signatureCard');
  const stampCard = document.getElementById('stampCard');
  
  signatureCheckbox.checked = currentSettings.includeSignature;
  stampCheckbox.checked = currentSettings.includeStamp;
  signatureCard.classList.toggle('checked', currentSettings.includeSignature);
  stampCard.classList.toggle('checked', currentSettings.includeStamp);
  
  // Update sliders
  const sliders = ['headerFontSize', 'bodyFontSize', 'tableFontSize', 'smallFontSize', 'qrSize', 'imageQuality'];
  sliders.forEach(slider => {
    const element = document.getElementById(slider);
    const valueSpan = document.getElementById(slider + 'Value');
    const value = parseInt(currentSettings[slider]) || element.value;
    
    element.value = value;
    const unit = slider.includes('FontSize') ? 'px' : (slider === 'qrSize' ? 'px' : '%');
    valueSpan.textContent = value + unit;
  });
  
  // Show/hide relevant sections
  const paperSettings = document.getElementById('paperSettings');
  const imageSettings = document.getElementById('imageSettings');
  const stampPlacement = document.getElementById('stampPlacement');
  
  if (currentSettings.fileType === 'png' || currentSettings.fileType === 'jpg') {
    paperSettings.classList.add('hidden');
    imageSettings.classList.remove('hidden');
  } else if (currentSettings.fileType === 'excel') {
    paperSettings.classList.add('hidden');
    imageSettings.classList.add('hidden');
  } else {
    paperSettings.classList.remove('hidden');
    imageSettings.classList.add('hidden');
  }
  
  if (currentSettings.includeStamp) {
    stampPlacement.classList.remove('hidden');
  } else {
    stampPlacement.classList.add('hidden');
  }
  
  // Show/hide export method previews
  document.getElementById('emailPreview').classList.toggle('hidden', currentSettings.exportMethod !== 'email');
  document.getElementById('whatsappPreview').classList.toggle('hidden', currentSettings.exportMethod !== 'whatsapp');
}

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
  if (e.ctrlKey || e.metaKey) {
    switch(e.key) {
      case 'p':
        e.preventDefault();
        updatePreview();
        break;
      case 'e':
        e.preventDefault();
        handleExport();
        break;
      case 's':
        e.preventDefault();
        document.getElementById('templateName').focus();
        break;
    }
  }
});

// Auto-save settings to localStorage
function saveSettingsToStorage() {
  localStorage.setItem('quotepro_export_settings', JSON.stringify(currentSettings));
}

function loadSettingsFromStorage() {
  const saved = localStorage.getItem('quotepro_export_settings');
  if (saved) {
    try {
      const settings = JSON.parse(saved);
      currentSettings = { ...currentSettings, ...settings };
      updateUIFromSettings();
    } catch (e) {
      console.warn('Failed to load saved settings:', e);
    }
  }
}

// Load saved settings on page load
window.addEventListener('load', loadSettingsFromStorage);

// Save settings whenever they change
const originalUpdatePreview = updatePreview;
updatePreview = function() {
  saveSettingsToStorage();
  originalUpdatePreview();
};
</script>

</body>
</html>